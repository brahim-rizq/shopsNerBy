<?php

namespace AppBundle\Repository;

/**
 * ShopsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopsRepository extends \Doctrine\ORM\EntityRepository
{

	public function getAllMyShops($user)
    {
    	    $userLat = $user->getUserinfo()->getLat();
            $userLang = $user->getUserinfo()->getLang();
            $shops = $this->createQueryBuilder('a')
               ->where('a.createdBy = :user')
               ->setParameter('user', $user->getId())
               ->orderBy('a.id', 'DESC')
               ->getQuery()->getResult();
               $results = array();
             foreach ($shops as $shop) {
                if ($userLat != null && $userLang != null) {
                    $shop->setDistance($this->getDistance($shop->getLat(),$shop->getLang(),$userLat,$userLang)) ;
                }
                       $results[] = $shop;
                                   
             }
             return $results;
    }

	public function getAllShops($user)
    {
    	    $userLat = $user->getUserinfo()->getLat();
            $userLang = $user->getUserinfo()->getLang();
            $query = $this->createQueryBuilder('a');

               if ($user->getUserinfo() != null && $user->getUserinfo()->getCity() != null) {
                    $query->where('a.city LIKE :city');
                    $query->setParameter('city', $user->getUserinfo()->getCity());
                }
            $shops = $query->getQuery()->getResult();

               $results = array();
             foreach ($shops as $shop) {
                if ($userLat != null && $userLang != null) {
                    $shop->setDistance($this->getDistance($shop->getLat(),$shop->getLang(),$userLat,$userLang)) ;
                }
                if (!$shop->getLikes()->count()) {
                       $results[]=$shop;
                }
                                   
             }
             return $results;
    }


  public function getRelatedShops($category,$user)
    {
            $userLat = $user->getUserinfo()->getLat();
            $userLang = $user->getUserinfo()->getLang();
            $shops = $this->createQueryBuilder('a')->where('a.category = :cat')->setParameter('cat', $category)->getQuery()->getResult();

               $results = array();
             foreach ($shops as $shop) {
                if ($userLat != null && $userLang != null) {
                    $shop->setDistance($this->getDistance($shop->getLat(),$shop->getLang(),$userLat,$userLang)) ;
                }
                if (!$shop->getLikes()->count()) {
                       $results[]=$shop;
                }
                                   
             }
             return $results;
    }
    private function getDistance($lat1, $lon1, $lat2, $lon2) {

      $theta = $lon1 - $lon2;
      $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
      $dist = acos($dist);
      $dist = rad2deg($dist);
      $miles = $dist * 60 * 1.1515;
      

     
        return round($miles * 1.609344,2);
      
    }    
}
